1. Socket:
定义：Socket 是一个抽象层，它为网络通信提供了一个端点，使得数据可以在这个端点之间流动。在网络编程中，Socket 是一个基本的概念，它允许程序创建和管理网络连接。
用途：Socket 可以用于多种网络协议，包括 TCP 和 UDP。TCP Socket 提供可靠的、面向连接的通信，而 UDP Socket 提供不可靠的、无连接的通信。
操作：Socket 编程通常涉及创建 Socket，绑定到一个地址和端口，监听连接（对于服务器），或者连接到服务器（对于客户端），以及发送和接收数据。
适用场景：适用于需要自定义协议或低级网络控制的应用程序。
2. WebSocket:
定义：WebSocket 是一个网络通信协议，提供了在单个 TCP 连接上进行全双工通信的能力。它设计用于在客户端和服务器之间实现持久的连接。
用途：WebSocket 允许服务器主动向客户端发送消息，这使得它非常适合需要实时数据传输的应用，如在线游戏、聊天应用、实时通知等。
操作：WebSocket 通过一个 HTTP 请求来初始化，这个请求会升级到 WebSocket 协议。一旦建立连接，客户端和服务器就可以通过这个持久的连接进行数据交换。
区别
连接类型：Socket 可以是 TCP 或 UDP，而 WebSocket 通常是基于 TCP 的。
通信模式：Socket 通常是请求-响应模式，而 WebSocket 支持全双工通信
建立连接：Socket 连接是通过 IP 地址和端口号直接建立的，而 WebSocket 连接是通过一个 HTTP 请求升级的。
持久连接：WebSocket 旨在建立持久连接，而传统的 Socket 连接可能更加短暂。
用途：WebSocket 更适合需要实时数据传输的应用，而 Socket 可以用于更广泛的用途，包括但不限于实时通信。
总的来说，WebSocket 是在 Socket 基础上为了满足特定需求（如实时通信）而设计的一种高级协议。
